version: '3'

dotenv:
  - .env

vars:
  MODULE: github.com/FilipSolich/go-template
  BIN: bin
  VERSION: '{{default "latest" .VERSION}}'
  REGISTRY: ghcr.io
  IMAGE: '{{.REGISTRY}}/filipsolich/go-template'
  TAG: '{{.IMAGE}}:{{.VERSION}}'
  DATETIME:
    sh: date -u +'%Y-%m-%dT%H:%M:%SZ'
  REVISION:
    sh: git rev-parse --short HEAD

  # Tools
  GOLANGCI_LINT: golangci-lint
  GOLANGCI_LINT_VERSION: v1.62.2
  GORELEASER: goreleaser
  GORELEASER_VERSION: v2.2.0

tasks:
  default:
    silent: true
    cmds:
      - task -l --sort none

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...

  vet:
    desc: Vet code
    cmds:
      - go vet ./...

  lint:
    desc: Lint code
    deps: [tools:install:golangci-lint]
    cmds:
      - '{{.BIN}}/{{.GOLANGCI_LINT}} run'

  build:
    desc: Build binaries
    cmds:
      - task: build:server

  build:server:
    desc: Build server
    cmds:
      - go build -ldflags "-X {{.MODULE}}/internal/version.Version={{.VERSION}} -X {{.MODULE}}/internal/version.Commit={{.REVISION}}" -o bin/server {{.MODULE}}/cmd/server

  run:
    desc: Run server
    deps: [build:server]
    cmds:
      - '{{.BIN}}/server'

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out

  clean:
    desc: Clean up
    cmds:
      - go clean -r -i -testcache
      - rm -rf bin
      - rm -rf dist
      - rm -rf .task
      - rm -f coverage.out
      - find . -name '__debug_*' -type f -delete

  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: build
      - task: test

  docker:build:
    desc: Build Docker image
    cmds:
      - docker build
        --build-arg CREATED={{.DATETIME}}
        --build-arg VERSION={{.VERSION}}
        --build-arg REVISION={{.REVISION}}
        -t {{.TAG}} .

  docker:push:
    desc: Push Docker image
    cmds:
      - docker push {{.TAG}}

  tools:install:
    desc: Install Go tool
    requires:
      vars: [NAME, PACKAGE, VERSION]
    dir: '{{.BIN}}'
    silent: true
    cmd: |
      if [ -f "{{.NAME}}-{{.VERSION}}" ]; then
        exit 0
      fi
      echo "Downloading {{.NAME}}@{{.VERSION}}"
      GOBIN={{.PWD}}/{{.BIN}} go install {{.PACKAGE}}@{{.VERSION}}
      mv {{.NAME}} {{.NAME}}-{{.VERSION}}
      ln -sf {{.NAME}}-{{.VERSION}} {{.NAME}}

  tools:install:golangci-lint:
    desc: Install golangci-lint if not installed already
    cmds:
      - task: tools:install
        vars:
          NAME: '{{.GOLANGCI_LINT}}'
          PACKAGE: github.com/golangci/golangci-lint/cmd/golangci-lint
          VERSION: '{{.GOLANGCI_LINT_VERSION}}'

  tools:install:goreleaser:
    desc: Install goreleaser if not installed already
    cmds:
      - task: tools:install
        vars:
          NAME: '{{.GORELEASER}}'
          PACKAGE: github.com/goreleaser/goreleaser/v2
          VERSION: '{{.GORELEASER_VERSION}}'

  release:
    deps: [tools:install:goreleaser]
    cmds:
      - '{{.BIN}}/{{.GORELEASER}} release --snapshot --clean'
